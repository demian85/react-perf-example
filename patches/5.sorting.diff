diff --git a/src/components/App.js b/src/components/App.js
index 2b8c64e..260f8ba 100644
--- a/src/components/App.js
+++ b/src/components/App.js
@@ -3,7 +3,7 @@ import { Provider } from 'react-redux';
 
 import store from '../store';
 import { onRenderCallback } from '../store/utils';
-import TableView from './TableView';
+import TableView from './SortableTableView';
 
 import './App.module.css';
 
diff --git a/src/components/SortableTableView.jsx b/src/components/SortableTableView.jsx
new file mode 100644
index 0000000..f6baf71
--- /dev/null
+++ b/src/components/SortableTableView.jsx
@@ -0,0 +1,92 @@
+import React from 'react';
+import { connect } from 'react-redux';
+import memoizeOne from 'memoize-one';
+
+import { updateUserLanguage } from '../store/actions';
+import Table from './Table';
+import Controls from './SortingControls';
+
+class TableView extends React.Component {
+  state = {
+    sortBy: 'id',
+    devices: [],
+  };
+
+  static getDerivedStateFromProps(props, state) {
+    return {
+      devices: sortDevices(props.devices, state.sortBy)
+    }
+  }
+
+  render() {
+    return (
+      <section>
+        <h1>Device List ({this.props.devices.length})</h1>
+        <Controls
+          onLanguageChange={this.updateUserLanguage}
+          onSortChange={this.updateSortColumn}
+          userLanguage={this.props.userLanguage}
+          sortBy={this.state.sortBy}
+        />
+        <Table rows={this.state.devices} columns={this.props.columns} />
+      </section>
+    );
+  }
+
+  updateUserLanguage = (value) => {
+    this.props.dispatch(updateUserLanguage(value));
+  }
+
+  updateSortColumn = (sortBy) => {
+    this.setState({ sortBy });
+  }
+}
+
+const sortDevices = (devices, field) => {
+  const out = Array.from(devices);
+  out.sort((a, b) => {
+    if (a[field] > b[field]) return 1;
+    if (a[field] < b[field]) return -1;
+    return 0;
+  });
+  return out;
+};
+
+const translateColumnName = (name, lang) => {
+  const map = {
+    'ID': 'ID',
+    'Name': 'Nombre',
+    'Time': 'Hora',
+    'Location': 'UbicaciÃ³n',
+  };
+  return lang.startsWith('es') ? map[name] : name;
+}
+
+const filterDevices = (deviceMap) => {
+  return Object.values(deviceMap).filter((device) => !!device.active);
+}
+
+const transformColumns = (columns, userPrefs) => {
+  const { lang } = userPrefs;
+  return columns
+    .map((column) => {
+      const label = translateColumnName(column.label, lang);
+      return { ...column, label };
+    });
+}
+
+const mapStateToProps = () => {
+  const getDevicesMemoized = memoizeOne(filterDevices);
+  const getColumnsMemoized = memoizeOne(transformColumns);
+  return (state) => {
+    const devices = getDevicesMemoized(state.devices);
+    const columns = getColumnsMemoized(state.columns, state.userPrefs);
+    return {
+      devices,
+      columns,
+      userLanguage: state.userPrefs.lang,
+    };
+  }
+}
+
+export default connect(mapStateToProps)(TableView);
diff --git a/src/components/SortingControls.jsx b/src/components/SortingControls.jsx
new file mode 100644
index 0000000..cee06f6
--- /dev/null
+++ b/src/components/SortingControls.jsx
@@ -0,0 +1,24 @@
+import React from 'react';
+
+import styles from './Controls.module.css';
+
+export default React.memo(function Controls(props) {
+  return (
+    <div className={styles.root}>
+      <label>
+        User language:
+          <select onChange={(e) => props.onLanguageChange(e.target.value)} value={props.userLanguage}>
+          <option value="es-AR">es-AR</option>
+          <option value="en-US">en-US</option>
+        </select>
+      </label>
+      <label>
+        Sort by:
+          <select onChange={(e) => props.onSortChange(e.target.value)} value={props.sortBy}>
+          <option value="id">ID</option>
+          <option value="name">Name</option>
+        </select>
+      </label>
+    </div>
+  );
+});
